{"version":3,"sources":["../src/config-loader.ts"],"sourcesContent":["import { ControllerConfig } from \"./index\";\n\n/**\n * Base URL for loading config files from CDN\n */\nconst CONFIG_BASE_URL = \"https://static.cartridge.gg/presets\";\n\n/**\n * Interface for the configs index file\n */\ninterface ConfigsIndex {\n  configs: string[];\n  baseUrl: string;\n}\n\n/**\n * Loads the index of available configs from the CDN\n * @returns Promise resolving to the list of available config names and base URL\n */\nexport async function getConfigsIndex(): Promise<ConfigsIndex> {\n  try {\n    const response = await fetch(`${CONFIG_BASE_URL}/index.json`);\n    if (!response.ok) {\n      throw new Error(`Failed to load configs index: ${response.statusText}`);\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error loading configs index:\", error);\n    return { configs: [], baseUrl: CONFIG_BASE_URL };\n  }\n}\n\n/**\n * Loads the index of available configs from the CDN\n * @returns Promise resolving to the list of available config names\n */\nexport async function getAvailableConfigs(): Promise<string[]> {\n  const indexData = await getConfigsIndex();\n  return indexData.configs;\n}\n\n/**\n * Loads a specific config from the CDN\n * @param configName The name of the config to load\n * @returns Promise resolving to the loaded config or null if not found\n */\nexport async function loadConfig(\n  configName: string\n): Promise<ControllerConfig | null> {\n  try {\n    const indexData = await getConfigsIndex();\n    const baseUrl = indexData.baseUrl || CONFIG_BASE_URL;\n    const prefix = `${baseUrl}/${configName}`;\n\n    const response = await fetch(`${prefix}/config.json`);\n    if (!response.ok) {\n      throw new Error(\n        `Failed to load config ${configName}: ${response.statusText}`\n      );\n    }\n\n    const config = await response.json();\n\n    if (config && config.theme) {\n      // Prefix icon\n      if (config.theme.icon && !config.theme.icon.startsWith(\"http\")) {\n        config.theme.icon = `${prefix}/${config.theme.icon}`;\n      }\n\n      // Prefix cover\n      if (config.theme.cover) {\n        if (typeof config.theme.cover === \"string\") {\n          if (!config.theme.cover.startsWith(\"http\")) {\n            config.theme.cover = `${prefix}/${config.theme.cover}`;\n          }\n        } else {\n          if (\n            config.theme.cover.light &&\n            !config.theme.cover.light.startsWith(\"http\")\n          ) {\n            config.theme.cover.light = `${prefix}/${config.theme.cover.light}`;\n          }\n          if (\n            config.theme.cover.dark &&\n            !config.theme.cover.dark.startsWith(\"http\")\n          ) {\n            config.theme.cover.dark = `${prefix}/${config.theme.cover.dark}`;\n          }\n        }\n      }\n\n      const prefixOptimizedImageSet = (imageSet: any) => {\n        if (!imageSet) return;\n        for (const format in imageSet) {\n          if (imageSet[format]) {\n            for (const size in imageSet[format]) {\n              if (\n                imageSet[format][size] &&\n                !imageSet[format][size].startsWith(\"http\")\n              ) {\n                imageSet[format][size] = `${prefix}/${imageSet[format][size]}`;\n              }\n            }\n          }\n        }\n      };\n\n      // Prefix optimizedIcon\n      if (config.theme.optimizedIcon) {\n        prefixOptimizedImageSet(config.theme.optimizedIcon);\n      }\n\n      // Prefix optimizedCover\n      if (config.theme.optimizedCover) {\n        if (typeof config.theme.optimizedCover === \"string\") {\n          // This case should not happen based on types, but as a safeguard\n          if (!config.theme.optimizedCover.startsWith(\"http\")) {\n            // @ts-ignore\n            config.theme.optimizedCover = `${prefix}/${config.theme.optimizedCover}`;\n          }\n        } // Assuming ThemeValue<OptimizedImageSet>\n        else if (\n          (config.theme.optimizedCover as any).light ||\n          (config.theme.optimizedCover as any).dark\n        ) {\n          // It's a ThemeValue<OptimizedImageSet>\n          const themeVal = config.theme.optimizedCover as {\n            light?: any;\n            dark?: any;\n          };\n          if (themeVal.light) {\n            prefixOptimizedImageSet(themeVal.light);\n          }\n          if (themeVal.dark) {\n            prefixOptimizedImageSet(themeVal.dark);\n          }\n        } else {\n          // It's an OptimizedImageSet directly\n          prefixOptimizedImageSet(config.theme.optimizedCover);\n        }\n      }\n    }\n\n    return config;\n  } catch (error) {\n    console.error(`Error loading config ${configName}:`, error);\n    return null;\n  }\n}\n\n/**\n * Loads all available configs from the CDN\n * @returns Promise resolving to a map of config names to their loaded configs\n */\nexport async function loadAllConfigs(): Promise<\n  Record<string, ControllerConfig>\n> {\n  const indexData = await getConfigsIndex();\n  const availableConfigs = indexData.configs;\n  const baseUrl = indexData.baseUrl || CONFIG_BASE_URL;\n  const configsMap: Record<string, ControllerConfig> = {};\n\n  await Promise.all(\n    availableConfigs.map(async (configName) => {\n      try {\n        const response = await fetch(`${baseUrl}/${configName}/config.json`);\n        if (response.ok) {\n          const config = await response.json();\n          configsMap[configName] = config;\n        }\n      } catch (error) {\n        console.error(`Error loading config ${configName}:`, error);\n      }\n    })\n  );\n\n  return configsMap;\n}\n"],"mappings":"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","names":[]}
name: claude

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  review:
    # Optional: Filter by PR author
    # if: |
    #   github.event.pull_request.user.login == 'external-contributor' ||
    #   github.event.pull_request.user.login == 'new-developer' ||
    #   github.event.pull_request.author_association == 'FIRST_TIME_CONTRIBUTOR'

    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: read
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check if commit is from Claude
        id: check-author
        run: |
          AUTHOR_EMAIL=$(git log -1 --pretty=format:'%ae')
          AUTHOR_NAME=$(git log -1 --pretty=format:'%an')
          if [[ "$AUTHOR_EMAIL" == *"claude[bot]"* ]] || [[ "$AUTHOR_NAME" == *"claude[bot]"* ]]; then
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

      - name: Run Claude Code Review
        id: claude-review
        if: steps.check-author.outputs.skip != 'true'
        uses: anthropics/claude-code-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}

          # Optional: Specify model (defaults to Claude Sonnet 4, uncomment for Claude Opus 4)
          # model: "claude-opus-4-20250514"

          # Direct prompt for automated review (no @claude mention needed)
          direct_prompt: |
            Please review this TypeScript/Node.js library package PR and provide inline feedback using the GitHub review system. Follow these steps:

            1. **Check for existing reviews**: First, use `mcp__github__get_pull_request_reviews` to check if you have any existing pending or submitted reviews on this PR
            2. **Check existing comments**: Use `mcp__github__get_pull_request_comments` to see what comments have already been made to avoid redundancy
            3. **Start a fresh review**: Use `mcp__github__create_pending_pull_request_review` to begin a new pending review
            4. **Get diff information**: Use `mcp__github__get_pull_request_diff` to understand the code changes
            5. **Add unique inline comments**: Only add comments for issues that haven't been addressed in existing reviews
            6. **Add inline comments**: Use `mcp__github__add_pull_request_review_comment_to_pending_review` for each specific piece of feedback on particular lines, including code change suggestions where appropriate using multiline comments and the suggestion syntax:

            ```suggestion
              // Suggested code changes here
            ```

            7. **Submit the review**: Use `mcp__github__submit_pending_pull_request_review` with event type "COMMENT" (not "REQUEST_CHANGES") to publish all comments as a non-blocking review

            Only comment when something is off, wrong, or could be improved but don't be overly pedantic; if a given implementation is already good, do not comment on it.

            Focus your review on:

            **Configuration Management:**
            - Game configuration structure and JSON schema validation
            - Asset reference correctness (icons, covers, theme files)
            - Session policy definitions and security implications
            - StarkNet contract address format validation
            - Origin domain security and validation

            **TypeScript & Package Quality:**
            - Type safety and proper TypeScript usage
            - Export structure and public API design
            - Consistent coding patterns and conventions
            - Error handling in configuration loading
            - Package.json scripts and build configuration

            **Build System & Automation:**
            - Build script correctness and efficiency
            - Asset optimization and CDN integration
            - Generated file handling and gitignore patterns
            - PNPM workspace and dependency management
            - Validation script completeness

            **Gaming Ecosystem Integration:**
            - Cartridge Controller SDK compatibility
            - StarkNet blockchain integration patterns
            - Session policy security and least privilege
            - Theme consistency and design standards
            - ERC20 metadata accuracy and completeness

            **Security & Best Practices:**
            - Input validation for configuration data
            - Asset security and content validation
            - Origin validation and domain restrictions
            - Sensitive data handling in configurations
            - Build artifact security and integrity

            Provide specific, actionable feedback with inline comments and suggestions for line-specific issues. Include an concise overall summary when submitting the review.

            **Important**: Submit as "COMMENT" type so the review doesn't block the PR.

          # Add MCP GitHub tools for inline comments and project-specific testing
          allowed_tools: "mcp__github__create_pending_pull_request_review,mcp__github__get_pull_request_comments,mcp__github__get_pull_request_reviews,mcp__github__add_pull_request_review_comment_to_pending_review,mcp__github__submit_pending_pull_request_review,mcp__github__get_pull_request_diff"